version: 2.1

executors:
  docker-executor:
    docker:
      - image: circleci/android:api-29
    working_directory: ~/flutter-plugins-ci

  macos-executor:
    macos:
      xcode: 11.6.0
    working_directory: ~/flutter-plugins-ci

commands:
  install_flutter:
    description:
      Install Flutter and set up paths.
    parameters:
      flutter_branch:
        description: Flutter branch or version tag.
        type: string
        default: stable
    steps:
      - run:
          name: Set up Flutter
          command: |
            echo 'export FLUTTER_HOME=${HOME}/sdks/flutter' >> $BASH_ENV
            echo 'export FLUTTER_BRANCH=<< parameters.flutter_branch >>' >> $BASH_ENV
            echo 'export FLUTTER_ROOT=${FLUTTER_HOME}' >> $BASH_ENV
            echo 'export PATH=${PATH}:${FLUTTER_HOME}/bin:${FLUTTER_HOME}/bin/cache/dart-sdk/bin:${HOME}/.pub-cache/bin:${FLUTTER_HOME}/.pub-cache/bin' >> $BASH_ENV
            source $BASH_ENV
            git clone --branch ${FLUTTER_BRANCH} https://github.com/flutter/flutter.git ${FLUTTER_HOME}
            (yes || true) | flutter doctor --android-licenses && flutter doctor

  test_on_upstream:
    steps:
      - run: echo "$CI_PULL_REQUEST"

  write_pub_token:
    description:
      Write OAuth credentials to ~/.pub-cache/credentials.json
    steps:
      - run:
          name: Write Google OAuth Token
          command: |
            mkdir -p ~/.pub-cache
            cat <<EOF > ~/.pub-cache/credentials.json
            {
              "accessToken":"$OAUTH_ACCESS_TOKEN",
              "refreshToken":"$OAUTH_REFRESH_TOKEN",
              "tokenEndpoint":"https://accounts.google.com/o/oauth2/token",
              "scopes": [ "openid", "https://www.googleapis.com/auth/userinfo.email" ],
              "expiration": $OAUTH_EXPIRATION
            }
            EOF

jobs:
  unit_test_flutter:
    executor: docker-executor
    steps:
      - install_flutter
      - checkout
      - run:
          name: Install junitreport for JUnit XML reports
          command: flutter pub global activate junitreport
      - run:
          name: Run Flutter Unit Tests
          command: . .circleci/test_all_plugins.sh flutter-test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex "\./packages/.*/test-results/.*-flutter-test\.xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  # iOS tests won't run with Flutter 1.20. Disabling for now.

  # unit_test_ios:
  #   executor: macos-executor
  #   steps:
  #     - install_flutter
  #         # iOS unit tests break on 1.20
  #         # flutter_branch: 1.17.5
  #     - checkout
  #     - run:
  #         name: Pre-start iOS simulator
  #         command: xcrun instruments -w "iPhone 11 (13.6) [" || true
  #     - run:
  #         name: Run iOS Unit Tests
  #         command: . .circleci/test_all_plugins.sh ios-test
  #     - run:
  #         name: Save test results
  #         command: |
  #           mkdir -p ~/test-results/junit/
  #           find . -type f -regex "\./packages/.*/example/ios/test-results/.*-xcodebuild-test\.xml" -exec cp {} ~/test-results/junit/ \;
  #         when: always
  #     - store_test_results:
  #         path: ~/test-results
  #     - store_artifacts:
  #         path: ~/test-results/junit

  unit_test_android:
    executor: docker-executor
    steps:
      - install_flutter
      - checkout
      - run:
          name: Run Android Unit Tests
          command: . .circleci/test_all_plugins.sh android-test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex "\./packages/.*/example/build/.*/test-results/.*\.xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  integ_test_ios_dummy:
    executor: macos-executor
    steps:
      - run: echo "Dummy iOS integ tests"
      - run: |
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "No AWS_ACCESS_KEY_ID is set! Failing..."
            exit 1;
          else
            echo "Credentials are available. Let's fetch the data!"
          fi

  integ_test_android_dummy:
    executor: macos-executor
    steps:
      - run: echo "Dummy Android integ tests"
      - run: |
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "No AWS_ACCESS_KEY_ID is set! Failing..."
            exit 1;
          else
            echo "Credentials are available. Let's fetch the data!"
          fi

  e2e_test_ios_dummy:
    executor: macos-executor
    steps:
      - run: echo "Dummy iOS e2e tests"
      - run: |
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "No AWS_ACCESS_KEY_ID is set! Failing..."
            exit 1;
          else
            echo "Credentials are available. Let's fetch the data!"
          fi

  e2e_test_android_dummy:
    executor: macos-executor
    steps:
      - run: echo "Dummy Android e2e tests"
      - run: |
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "No AWS_ACCESS_KEY_ID is set! Failing..."
            exit 1;
          else
            echo "Credentials are available. Let's fetch the data!"
          fi

  integ_test_ios_dummy_ext:
    executor: macos-executor
    steps:
      - run: echo "Dummy iOS integ tests"
      - test_on_upstream
      - run: |
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "No AWS_ACCESS_KEY_ID is set! Failing..."
            exit 1;
          else
            echo "Credentials are available. Let's fetch the data!"
          fi

  integ_test_android_dummy_ext:
    executor: macos-executor
    steps:
      - run: echo "Dummy Android integ tests"
      - test_on_upstream
      - run: |
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "No AWS_ACCESS_KEY_ID is set! Failing..."
            exit 1;
          else
            echo "Credentials are available. Let's fetch the data!"
          fi

  e2e_test_ios_dummy_ext:
    executor: macos-executor
    steps:
      - run: echo "Dummy iOS e2e tests"
      - test_on_upstream
      - run: |
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "No AWS_ACCESS_KEY_ID is set! Failing..."
            exit 1;
          else
            echo "Credentials are available. Let's fetch the data!"
          fi

  e2e_test_android_dummy_ext:
    executor: macos-executor
    steps:
      - run: echo "Dummy Android e2e tests"
      - test_on_upstream
      - run: |
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "No AWS_ACCESS_KEY_ID is set! Failing..."
            exit 1;
          else
            echo "Credentials are available. Let's fetch the data!"
          fi

  deploy_dummy:
    executor: docker-executor
    steps:
      - run: echo "Dummy deploy"
      # - write_oauth_tokens
      - run: fastlane publish_plugins

releasable_branches: &releasable_branches
  branches:
    only:
      - release
      - master

workflows:
  test_deploy:
    jobs:
      - unit_test_flutter
      - unit_test_android
      # - unit_test_ios
      # - request_testing:
      #     type: approval
      #     requires:
      #       - unit_test_flutter
      #       - unit_test_android
      #       - unit_test_ios
      #     filters:
      #       branches:
      #         only: /pull\/[0-9]+/
      # - integ_test_android_dummy_ext:
      #     requires:
      #       - request_testing
      # - integ_test_ios_dummy_ext:
      #     requires:
      #       - request_testing
      # - e2e_test_android_dummy_ext:
      #     requires:
      #       - request_testing
      # - e2e_test_ios_dummy_ext:
      #     requires:
      #       - request_testing
      - integ_test_android_dummy:
          filters:
            branches:
              ignore: /pull\/[0-9]+/
      - integ_test_ios_dummy:
          filters:
            branches:
              ignore: /pull\/[0-9]+/
      - e2e_test_android_dummy:
          filters:
            branches:
              ignore: /pull\/[0-9]+/
      - e2e_test_ios_dummy:
          filters:
            branches:
              ignore: /pull\/[0-9]+/
      - request_deploy:
          type: approval
          requires:
            - unit_test_flutter
            - unit_test_android
            # - unit_test_ios
            - integ_test_android_dummy
            - integ_test_ios_dummy
            - e2e_test_android_dummy
            - e2e_test_ios_dummy
          filters:
            <<: *releasable_branches
      - deploy_dummy:
          requires:
            - request_deploy
