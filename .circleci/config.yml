version: 2.1

executors:
  docker-executor:
    docker:
      - image: circleci/android:api-29
    working_directory: ~/flutter-plugins-ci

  macos-executor:
    macos:
      xcode: 11.6.0
    working_directory: ~/flutter-plugins-ci

commands:
  setup_env_vars:
    description:
      Set up env vars for Flutter.
    parameters:
      flutter_version:
        description: Flutter version
        type: string
        default: stable
    steps:
      - run:
          name: Set up env vars
          command: |
            echo 'export FLUTTER_HOME=${HOME}/sdks/flutter' >> $BASH_ENV
            echo 'export FLUTTER_VERSION=<< parameters.flutter_version >>' >> $BASH_ENV
            echo 'export FLUTTER_ROOT=${FLUTTER_HOME}' >> $BASH_ENV
            echo 'export PATH=${PATH}:${FLUTTER_HOME}/bin:${FLUTTER_HOME}/bin/cache/dart-sdk/bin:${HOME}/.pub-cache/bin:${FLUTTER_HOME}/.pub-cache/bin' >> $BASH_ENV
            source $BASH_ENV
  install_flutter:
    description:
      Install Flutter and set up paths.
    steps:
      - run:
          name: Set up Flutter
          command: |
            git clone --branch ${FLUTTER_VERSION} https://github.com/flutter/flutter.git ${FLUTTER_HOME}
  flutter_doctor:
    description:
      Initialize Flutter and run flutter doctor.
      This should be run after persisting to workspace to avoid caching binaries for Linux.
    steps:
      - run:
          name: Flutter doctor
          command: |
            (yes || true) | flutter doctor --android-licenses
            flutter doctor

  test_on_upstream:
    steps:
      - run: echo "$CI_PULL_REQUEST"

jobs:
  checkout_and_install_flutter:
    executor: docker-executor
    steps:
      - setup_env_vars
      - install_flutter
      - checkout
      - persist_to_workspace:
          root: ~/
          paths:
            - sdks/flutter
            - flutter-plugins-ci
      - flutter_doctor

  unit_test_flutter:
    executor: docker-executor
    steps:
      - setup_env_vars
      - attach_workspace:
          at: ~/
      - flutter_doctor
      - run:
          name: Install junitreport for JUnit XML reports
          command: flutter pub global activate junitreport
      - run:
          name: Run Flutter Unit Tests
          command: . .circleci/test_all_plugins.sh flutter-test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex "\./packages/.*/test-results/.*-flutter-test\.xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  unit_test_ios:
    executor: macos-executor
    steps:
      - setup_env_vars
      - attach_workspace:
          at: ~/
      - flutter_doctor
      - run:
          name: Run iOS Unit Tests
          command: . .circleci/test_all_plugins.sh ios-test

  unit_test_android:
    executor: docker-executor
    steps:
      - setup_env_vars
      - attach_workspace:
          at: ~/
      - flutter_doctor
      - run:
          name: Run Android Unit Tests
          command: . .circleci/test_all_plugins.sh android-test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex "\./packages/.*/example/build/.*/test-results/.*\.xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  integ_test_ios_dummy:
    executor: macos-executor
    steps:
      - run: echo "Dummy iOS integ tests"
      - run: |
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "No AWS_ACCESS_KEY_ID is set! Failing..."
            exit 1;
          else
            echo "Credentials are available. Let's fetch the data!"
          fi

  integ_test_android_dummy:
    executor: macos-executor
    steps:
      - run: echo "Dummy Android integ tests"
      - run: |
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "No AWS_ACCESS_KEY_ID is set! Failing..."
            exit 1;
          else
            echo "Credentials are available. Let's fetch the data!"
          fi

  e2e_test_ios_dummy:
    executor: macos-executor
    steps:
      - run: echo "Dummy iOS e2e tests"
      - run: |
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "No AWS_ACCESS_KEY_ID is set! Failing..."
            exit 1;
          else
            echo "Credentials are available. Let's fetch the data!"
          fi

  e2e_test_android_dummy:
    executor: macos-executor
    steps:
      - run: echo "Dummy Android e2e tests"
      - run: |
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "No AWS_ACCESS_KEY_ID is set! Failing..."
            exit 1;
          else
            echo "Credentials are available. Let's fetch the data!"
          fi

  integ_test_ios_dummy_ext:
    executor: macos-executor
    steps:
      - run: echo "Dummy iOS integ tests"
      - test_on_upstream
      - run: |
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "No AWS_ACCESS_KEY_ID is set! Failing..."
            exit 1;
          else
            echo "Credentials are available. Let's fetch the data!"
          fi

  integ_test_android_dummy_ext:
    executor: macos-executor
    steps:
      - run: echo "Dummy Android integ tests"
      - test_on_upstream
      - run: |
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "No AWS_ACCESS_KEY_ID is set! Failing..."
            exit 1;
          else
            echo "Credentials are available. Let's fetch the data!"
          fi

  e2e_test_ios_dummy_ext:
    executor: macos-executor
    steps:
      - run: echo "Dummy iOS e2e tests"
      - test_on_upstream
      - run: |
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "No AWS_ACCESS_KEY_ID is set! Failing..."
            exit 1;
          else
            echo "Credentials are available. Let's fetch the data!"
          fi

  e2e_test_android_dummy_ext:
    executor: macos-executor
    steps:
      - run: echo "Dummy Android e2e tests"
      - test_on_upstream
      - run: |
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "No AWS_ACCESS_KEY_ID is set! Failing..."
            exit 1;
          else
            echo "Credentials are available. Let's fetch the data!"
          fi

  deploy_dummy:
    executor: docker-executor
    steps:
      - run: echo "Dummy deploy"

releasable_branches: &releasable_branches
  branches:
    only:
      - release
      - master

workflows:
  test_deploy:
    jobs:
      - checkout_and_install_flutter
      - unit_test_flutter:
          requires:
            - checkout_and_install_flutter
      - unit_test_android:
          requires:
            - checkout_and_install_flutter
      - unit_test_ios:
          requires:
            - checkout_and_install_flutter
      # - request_testing:
      #     type: approval
      #     requires:
      #       - unit_test_flutter
      #       - unit_test_android
      #       - unit_test_ios
      #     filters:
      #       branches:
      #         only: /pull\/[0-9]+/
      # - integ_test_android_dummy_ext:
      #     requires:
      #       - request_testing
      # - integ_test_ios_dummy_ext:
      #     requires:
      #       - request_testing
      # - e2e_test_android_dummy_ext:
      #     requires:
      #       - request_testing
      # - e2e_test_ios_dummy_ext:
      #     requires:
      #       - request_testing
      - integ_test_android_dummy:
          filters:
            branches:
              ignore: /pull\/[0-9]+/
          requires:
            - checkout_and_install_flutter
      - integ_test_ios_dummy:
          filters:
            branches:
              ignore: /pull\/[0-9]+/
          requires:
            - checkout_and_install_flutter
      - e2e_test_android_dummy:
          filters:
            branches:
              ignore: /pull\/[0-9]+/
          requires:
            - checkout_and_install_flutter
      - e2e_test_ios_dummy:
          filters:
            branches:
              ignore: /pull\/[0-9]+/
          requires:
            - checkout_and_install_flutter
      - request_deploy:
          type: approval
          requires:
            - unit_test_flutter
            - unit_test_android
            - unit_test_ios
            - integ_test_android_dummy
            - integ_test_ios_dummy
            - e2e_test_android_dummy
            - e2e_test_ios_dummy
          filters:
            <<: *releasable_branches
      - deploy_dummy:
          requires:
            - request_deploy
